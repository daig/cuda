.version 8.1
.target sm_52
.address_size 64

.visible .entry add( .param .u64 p1, .param .u64 p2, .param .u64 p3) {
	.reg .b64 	%temp<6>;

        //copy the arguments into registers as .global (ie shared) pointers
        // like `int* as = *p1`
        .reg .b64 %as;
        ld.param.u64 %temp0, [p1];
        cvta.to.global.u64 %as, %temp0;

        .reg .b64 %bs;
        ld.param.u64 %temp1, [p2];
        cvta.to.global.u64 %bs, %temp1;

        .reg .b64 %cs;
        ld.param.u64 %temp2, [p3];
        cvta.to.global.u64 %cs, %temp2;

        //copy the thread index to registers
	.reg .b32 %blockIdx;
        mov.u32	%blockIdx, %ctaid.x;

	.reg .b32 %blockDimx;
        mov.u32 %blockDimx, %ntid.x;

	.reg .b32 %threadIdx;
        mov.u32 %threadIdx,  %tid.x;

        //compute the linear array index (threadId = blockIdx*blockDimx + threadIdx)
	.reg .b32 %threadId;
        mad.lo.s32 %threadId, %blockIdx, %blockDimx, %threadIdx;
            
        //check that the index is in bounds (`if (threadId >= N) {return 0;}`)
        .reg .pred %outBounds; setp.gt.s32 %outBounds, %threadId, 9999999;
	@%outBounds bra 	$END;

        //convert the thread index into a byte offset by multiplying by size(int)
	.reg .b64 %offset; mul.wide.s32 %offset, %threadId, 4;

        // read `a` and `b` from the (local) input arrays
	.reg .b32 %a;
        add.s64 %temp3, %as, %offset;
        ld.global.u32 %a, [%temp3];

        .reg .b32 %b;
        add.s64 %temp4, %bs, %offset;
        ld.global.u32 %b, [%temp4];

        // compute `c = a + b`
        .reg .b32 %c;
        add.s32 %c, %b, %a;

        // store `c` in the (shared) output array
	add.s64 %temp5, %cs, %offset; st.global.u32 [%temp5], %c;

$END:
	ret;
}
